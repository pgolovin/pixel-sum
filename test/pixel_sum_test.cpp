
#include "include/pixel_sum.h"
#include <gtest/gtest.h>
#include <memory>
#include <exception>

class PS_BasicTest : public ::testing::Test
{
protected:
    std::vector<unsigned char> image = { 0, 0, 0, 0 };
    std::unique_ptr<PixelSum> pixelSum;

    virtual void SetUp()
    {
    }

    virtual void TearDown()
    {
    }
};

TEST_F(PS_BasicTest, can_create_class_with_valid_parameters)
{

    ASSERT_NO_THROW(pixelSum = std::make_unique<PixelSum>(image.data(), 2, 2));
}

//checking unobvious errors that can be generated by the interface construction
// 1. object cannot be created if buffer is not provided
TEST_F(PS_BasicTest, failed_create_class_nullptr)
{
    ASSERT_THROW(pixelSum = std::make_unique<PixelSum>(nullptr, 2, 2), NullImageProvided);
    ASSERT_TRUE(pixelSum == nullptr);
}

// 2. user provided incorrect sizes for the image, negative values
// 2.1 x - negative
TEST_F(PS_BasicTest, failed_create_class_negative_x_size)
{
    ASSERT_THROW(pixelSum = std::make_unique<PixelSum>(image.data(), -1, 2), NegativeOrZeroSizeProvided);
    ASSERT_TRUE(pixelSum == nullptr);
}

// 2.2 y - negative
TEST_F(PS_BasicTest, failed_create_class_negative_y_size)
{
    ASSERT_THROW(pixelSum = std::make_unique<PixelSum>(image.data(), 2, -1), NegativeOrZeroSizeProvided);
    ASSERT_TRUE(pixelSum == nullptr);
}

// 3. user provided incorrect sizes for the image, zero values
// 3.1 x - 0
TEST_F(PS_BasicTest, failed_create_class_zero_x_size)
{
    ASSERT_THROW(pixelSum = std::make_unique<PixelSum>(image.data(), 0, 2), NegativeOrZeroSizeProvided);
    ASSERT_TRUE(pixelSum == nullptr);
}

// 3.2 y - 0
TEST_F(PS_BasicTest, failed_create_class_zero_y_size)
{
    ASSERT_THROW(pixelSum = std::make_unique<PixelSum>(image.data(), 2, 0), NegativeOrZeroSizeProvided);
    ASSERT_TRUE(pixelSum == nullptr);
}

